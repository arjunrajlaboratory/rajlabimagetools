function Hs = createAndLayOutMainGUI()

figH = figure('Position',[200 100 900 605],...
    'NumberTitle','off',...
    'Name','DensityGUI',...
    'Resize','on',...
    'Toolbar','none',...
    'MenuBar','none',...
    'HandleVisibility', 'callback',...
    'Color',[0.247 0.247 0.247],... 
    'KeyPressFcn',@KeyPressCallback,...
    'Visible','on',...
    'Renderer','zbuffer');

Hs = guihandles(figH);
Hs.figH = figH;
Hs = buildGUI(Hs,figH);
guidata(figH, Hs);
end

function [Hs] = buildGUI(Hs, figH)

Hs.imgAx = axes('Parent',figH,...
    'Units','normalized',...
    'Position',[0.019,0.022,.682,.97],...
    'YDir','reverse',...
    'XTick',[],'YTick',[],...
    'Color',[0,0,0]);
axis(Hs.imgAx, 'equal');

Hs.thumbAx = axes('Parent',figH,...
    'Units','normalized',...
    'Position',[0.710,0.680,0.136,0.2],...
    'YDir','reverse',...
    'Color',[1,1,1]);
axis(Hs.thumbAx, 'equal');
%----------------------------------------------------------------
% Threshold Controls
%----------------------------------------------------------------

Hs.thresholdAx = axes('Parent',figH,...
    'Units','normalized',...
    'Position',[0.710 0.095 0.276 0.3280],...
    'NextPlot','replacechildren',...
    'Visible','On',...
    'Color',[1 1 1]);

Hs.thresholdL = uicontrol('Parent',figH,'style','text',...
    'String','Threshold',...
    'Units','normalized',...
    'Visible','Off',...
    'Position',[0.710 0.330 0.112 0.036],...
    'FontSize',14);
Hs.resetThresh = makeButton(figH, 'Reset', [0.907 0.387 0.080 0.036]);
set(Hs.resetThresh, 'FontSize', 14);
%------------------------------------------------------------------
Hs.figTitle = uicontrol('Parent',figH,...
    'Style','text',...
    'String','DENTIST','FontSize',40,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position',[0.710 0.900 0.280 0.094],...
    'ForegroundColor',[1 1 1],...
    'BackgroundColor',[0.247 0.247 0.247]);
Hs.centList = uicontrol('Parent',figH,...
    'Style','listbox',...
    'FontSize',10,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position',[0.850 0.7180 0.136 0.1623],...
    'ForegroundColor',[1 1 1],...
    'BackgroundColor',[0.247 0.247 0.247]);
Hs.centroidsCheck = makeCheckBox(figH, 'Centroids', [0.710 0.630 0.080 0.0375], 1);
Hs.numSpotsCheck = makeCheckBox(figH, 'NumSpots', [0.790 0.630 0.080 0.0375]);
% Hs.spotsCheck = makeCheckBox(figH, 'Spots', [0.880 0.630 0.136 0.0375], 0);
Hs.spotsCheck  = uicontrol('Parent',figH,... % add callback for integration with hotkey 's'
    'Style','checkbox',...
    'Callback',@spotsCheck_Callback,...
    'Units','normalized',...
    'Position',[0.880 0.630 0.136 0.0375],...
    'String','Spots (S)','FontSize',10,...
    'Value',1,'ForegroundColor',[1 1 1],...%    'KeyPressFcn',@spotsCheck_Callback,...
    'BackgroundColor',[0.247 0.247 0.247]);

Hs.filterButton = makeButton(figH, 'Filter', [0.850 0.680 0.068 0.0320]);
set(Hs.filterButton, 'Value', 0)
Hs.filterCheckBox = makeCheckBox(figH, 'On/Off', [0.919 0.680 0.067 0.0375], 0);
Hs.chanPop  = uicontrol('Parent',figH,...
    'Style','popup',...
    'String','Empty',...
    'FontSize',10,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position',[0.710 0.600 0.136 0.0300],...
    'ForegroundColor',[0 0 0],...
    'BackgroundColor',[0.247 0.247 0.247]);
Hs.zoomButton = makeToggleButton(figH, 'Zoom', [0.850 0.590 0.045667 0.0375]);
Hs.dragButton = makeToggleButton(figH, 'Drag', [0.89567 0.590 0.045667 0.0375]);
Hs.drawButton = makeToggleButton(figH, 'Del', [0.941334 0.590 0.045667 0.0375]);
Hs.saveButton = makeButton(figH, 'Save', [0.710 0.48775 0.0673775 0.0375],'off');
Hs.viewButton = makeButton(figH, 'View', [0.710 0.44825 0.0673775 0.0375],'off');
Hs.histButton = makeButton(figH, 'Histogram', [0.77988 0.52725 0.0673775 0.0375],'off');
Hs.locationButton = makeButton(figH, 'Location', [0.77988 0.48775 0.0673775 0.0375],'off');
Hs.makeThumbnailsButton = makeButton(figH, 'Remake thumbnails', ...
    [0.849744 0.44825 0.137255 0.0375], 'on', 'Regenerate Thumbnails');
Hs.drawPanel = uipanel('Parent',Hs.figH,...
    'Units','normalized',...
    'BorderType','etchedin',...
    'BackgroundColor',[0.247 0.247 0.247],...
    'Visible','on',...
    'Position',[0.849744,0.48775,0.137255,0.0773]);
Hs.undoButton = makeButton(Hs.drawPanel, 'Undo Last Deletion', [0.03 0.515 0.9 0.455], ...
    'off', 'Undo last action');
Hs.resetButton  = makeButton(Hs.drawPanel, 'Undelete All', [0.03 0.03 0.9 0.455], ...
    'off', 'Reset all deletions');
end

function buttonH = makeButton(Parent, String, Position, Enable, TooltipString)
buttonH  = uicontrol('Parent', Parent,...
    'String', String,...
    'Style','pushbutton',...
    'FontSize',10,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position', Position,...
    'BackgroundColor',[1 1 1]);
if nargin >= 4
    set(buttonH, 'Enable', Enable)
end
if nargin == 5
    set(buttonH, 'TooltipString', TooltipString)
end
end

function toggleH = makeToggleButton(Parent, String, Position)
toggleH  = uicontrol('Parent',Parent,...
    'String',String,...
    'Style','toggle',...
    'FontSize',10,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position',Position,...
    'BackgroundColor',[1 1 1]);
end

function checkboxH = makeCheckBox(Parent, String, Position, Value)
checkboxH = uicontrol('Parent',Parent,...
    'Style','checkbox',...
    'String',String,...
    'FontSize',10,...
    'HorizontalAlignment','Left',...
    'Units','normalized',...
    'Position',Position,...
    'ForegroundColor',[1 1 1],...
    'BackgroundColor',[0.247 0.247 0.247],...
    'Value',0);
% if nargin == 4
%     set(checkboxH, 'Value', Value)
% end
end

function radioH = makeRadio(Parent, String, Position)
radioH = uicontrol('Parent',Parent,...
    'Units','normalized',...
    'Style','radiobutton',...
    'BackgroundColor',[0.247 0.247 0.247],...
    'FontSize',10,...
    'Visible','on',...
    'ForegroundColor',[1,1,1],...
    'String',String,...
    'Position',Position);
end

function KeyPressCallback(src,evnt)
%KeyPressFcn automatically takes in two inputs.
%Src is the object that was active when the keypress occurred.
%Evnt stores the data for the key pressed
Hs = guidata(src);
%Brings in the handles structure in to the function.

k = evnt.Key; %k is the key that is pressed.

if strcmp(k,'s') %If alt was pressed.
    pause(0.001) %Allows time to update.
    %define hObject as the object of the callback that we are going to use
    %in this case, we are mapping the enter key to the add_object_button
    %therefore, we define hObject as the add pushbutton
    
%     Hs
    hObject = Hs.spotsCheck;
%     hObject
%     Hs.spotsCheck.Value = ~Hs.spotsCheck.Value;
    %call the spotsCheck callback function.
    spotsCheck_Callback(hObject, []);
    
    %Do the same thing to map to all the other callbacks.
    %     elseif strcmp(k,'backspace')
    %         pause(0.001)
    %         hObject=Hs.undoSegment;
    %         undoSegment_Callback(hObject,[]);
    %     elseif strcmp(k,'rightarrow')
    %         pause(0.001)
    %         hObject=Hs.nextFileB;
    %         nextFileB_Callback(hObject,[]);
    %     elseif strcmp(k,'leftarrow')
    %         pause(0.001)
    %         hObject=Hs.prevFileB;
    %         prevFileB_Callback(hObject,[]);
end
end

function spotsCheck_Callback(hObject,eventdata)
% Checkbox to add/remove spot call circles on image in the overlay
Hs = guidata(gcbo);
set(Hs.spotsCheck, 'Value', ~Hs.spotsCheck.Value);
% Hs.spotsCheck.Callback % for debugging
Hs.spotsCheck.Callback()
guidata(gcbo,Hs);
end
