dentist.tests.cleanupForTests;

xs = [100, 101, 150, 200, 301, 150];
ys = [100, 101, 150, 200, 301, 350];

centroids = dentist.utils.Centroids(xs,ys);

numSpots = [1, 2, 3, 4, 3, 0]';

% in thumbnail coordinates, here they are:
%    1   -      -   -
%    -   2,3,4  -   -
%    -   -      -   -
%    -   0      -   3
%    -   -      -   -
%

numSpotsArray = dentist.utils.makeFilledChannelArray({'cy'}, @(x) numSpots);
mockSource = dentist.tests.MockCentroidsAndNumSpotsSource(...
    centroids, numSpotsArray);

cmap =  [0     0     1; ....
    0     1     1; ...
    1     1     0; ...
    1     0     0];

numSpotsTranslator = dentist.utils.ValueToColorTranslator(...
    @(x) x/max(x(:)), cmap);

imageWidth = 400;
imageHeight = 500;
pixelExpansionSize = 201;
thumbnailWidth = 4;
thumbnailHeight = 5;

inputs = struct();
inputs.centroidsAndNumSpotsSource = mockSource;
inputs.channelName = 'cy';
inputs.numSpotsToColorTranslator = numSpotsTranslator;
inputs.imageWidth = imageWidth;
inputs.imageHeight = imageHeight;

x = dentist.utils.ThumbnailMaker(inputs);
x.setThumbnailWidthAndHeight(thumbnailWidth, thumbnailHeight);
x.setPixelExpansionSize(pixelExpansionSize);


x.makeAndStore()
im = x.getRGBImage();

expectedRed = [...
    1     1     1     0; ...
    1     1     1     0; ...
    1     1     1     1; ...
    0     0     1     1; ...
    0     0     1     1];
expectedGreen = [...
    0     0     0     0; ...
    0     0     0     0; ...
    0     0     0     1; ...
    0     0     1     1; ...
    0     0     1     1];
expectedBlue = [...
    0     0     0     0; ...
    0     0     0     0; ...
    0     0     0     0; ...
    1     1     0     0; ...
    1     1     0     0];
expected = cat(3, expectedRed, expectedGreen, expectedBlue);
assert(all(im(:) == expected(:)))

x.prioritizeHighExpressers()
x.makeAndStore()
im = x.getRGBImage();
assert(all(im(:) == expected(:)))

x.prioritizeLowExpressers()
x.makeAndStore()
im = x.getRGBImage();
expectedRed = [...
    0     0     1     0; ...
    0     0     1     0; ...
    0     0     0     1; ...
    0     0     0     1; ...
    0     0     0     1];
expectedGreen = [...
    1     1     1     0; ...
    1     1     1     0; ...
    0     0     0     0; ...
    0     0     0     0; ...
    0     0     0     0];
expectedBlue = [...
    1     1     0     0; ...
    1     1     0     0; ...
    1     1     1     0; ...
    1     1     1     0; ...
    1     1     1     0];
expected = cat(3, expectedRed, expectedGreen, expectedBlue);
assert(all(im(:) == expected(:)))
