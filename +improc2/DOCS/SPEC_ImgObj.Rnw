"If you only remember one thing from this talk: When in doubt, leave it out." - Joshua Bloch

An Image Object can be built as follows:
<<>>=
obj = makeImObjFromFiles(imagenumber, dirPath, mask, metadata)
@

Get the (read-only) filenames, channel names, and metadata:
<<>>=
fnames = obj.filenames;
chanNames = obj.channelFields;
metadata = obj.metadata
@

Set and get the object mask:
<<>>=
obmask = obj.object_mask;
obj.object_mask = obmask;
@

Addition of a single channel processor:
<<>>=
obj = obj.registerNewProcessor(RegionalMaxProc(), 'cy');
@

Addition of a multi channel processor:
<<>>=
obj = obj.registerNewProcessor(SpotColocProc(), {'cy', 'tmr'}); 
@

Running or updating of all processors registered in an ImageObject:
<<>>=
obj = obj.runAll();
obj = obj.updateAll();
@

getting Processors:
<<>>=
proc = obj.getProcessor('cy'); % gets first processor
proc = obj.getProcessor('cy', 2); % gets second cy processor
proc = obj.getProcessor('cy', 'GaussFitProcessor'); % gets last cy GaussFitProcessor
proc = obj.getProcessor('cy', 'GaussFitProcessor', 'first'); % gets first
proc = obj.getProcessor({'cy', 'tmr'}, 'ColocalizingProcessor');
@

setting Processors:
<<>>=
obj = obj.setProcessor(proc, 'cy', ...); % same optional parameters as getProcessor
@

Running a Processor and determing if there is a particular processor:
<<>>=
obj = obj.runProcessor('cy', ...); % same optional parameters as getProcessor
TF = obj.hasProcessor('cy', ...); % same optional parameters as getProcessor
@

The following are short hands for users manually inspecting image objects
or read-only extracting data from imageObjects:
<<>>=
value = obj.extractFromProcessor('getNumSpots', 'cy', ...);
value = obj.extractFromProcessor('getNumSpots', ...);
@
The behavior of the optional parameters is totally different though. The method will look through all the processors in the object for the requested property/method consistent with the parameters given (so if only 'cy', look through all 'cy'-only processors). It will return successfully if a unique processor with that property is found. Otherwise, it will return an error and say which all processors/channels matched.

<<>>=
propertyList = obj.listData('cy', ...);
@
Returns some kind of list, potentially displayable, of all 'extractable' properties in the channel.

Getting and setting an object containing the results of user visual inspection, containing user-specifiable properties such as "isGood", "isMitotic"
<<>>=
visResults = obj.visualInspectionResults;
obj.visualInspectionResults = visInput;
@
